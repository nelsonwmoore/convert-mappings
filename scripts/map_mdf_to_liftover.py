# ruff: noqa: T201
"""
Script to extract pairwise mappings from a combined CCDI Map-MDF YAML file.

This script takes the combined mapping file generated by the chain script and
extracts direct mappings from a specified source model to the linking model
(e.g., CCDIv1.7.2 to CCDIv2.1.0).

The output is a TSV file in the standard CCDI liftover format.
"""

from __future__ import annotations

from pathlib import Path

import click
import polars as pl

from convert_mappings.ccdi_liftover import extract_pairwise_mappings, load_yaml_mapping


@click.command()
@click.option(
    "--map_mdf",
    type=click.Path(exists=True, dir_okay=False, path_type=Path),
    required=True,
    help="Path to the combined mapping YAML file",
    prompt=True,
)
@click.option(
    "--source-model",
    required=True,
    help="Source model to extract (e.g., CCDIv1.7.2)",
    prompt=True,
)
@click.option(
    "--liftover_tsv",
    type=click.Path(dir_okay=False, path_type=Path),
    help="Output TSV file path (default: auto-generated)",
    prompt=True,
)
def main(map_mdf: Path, source_model: str, liftover_tsv: Path | None) -> None:
    """Extract pairwise CCDI model mappings from a combined mapping file."""
    # Load the combined mapping
    mapping_dict = load_yaml_mapping(map_mdf)

    # Extract the pairwise mappings
    try:
        mappings = extract_pairwise_mappings(mapping_dict, source_model)
    except ValueError as e:
        click.echo(f"Error: {e}", err=True)
        raise click.Abort()

    # Determine the output file path
    if liftover_tsv:
        output_path = liftover_tsv
    else:
        linking_model = mapping_dict["Source"]
        source_version = mapping_dict["Models"][source_model]["Version"]
        linking_version = mapping_dict["Models"][linking_model]["Version"]
        output_path = Path(f"{source_version}_{linking_version}_MAPPING_EXTRACTED.tsv")

    # Write the DataFrame to a TSV file
    df = pl.DataFrame(mappings)
    df.write_csv(output_path, separator="\t")
    click.echo(
        f"Pairwise mapping from {source_model} to {mapping_dict['Source']} saved to {output_path}",
    )
    click.echo(f"Extracted {len(mappings)} mappings")


if __name__ == "__main__":
    main()
